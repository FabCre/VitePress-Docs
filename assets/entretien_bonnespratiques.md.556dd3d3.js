import{_ as e,c as i,o as s,d as n}from"./app.b958bfe6.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Clean Code","slug":"clean-code","link":"#clean-code","children":[]},{"level":2,"title":"CraftsmanShip","slug":"craftsmanship","link":"#craftsmanship","children":[]},{"level":2,"title":"OOP","slug":"oop","link":"#oop","children":[]},{"level":2,"title":"SOLID","slug":"solid","link":"#solid","children":[]},{"level":2,"title":"Méthode Agile","slug":"methode-agile","link":"#methode-agile","children":[]},{"level":2,"title":"Veille Technologique","slug":"veille-technologique","link":"#veille-technologique","children":[]}],"relativePath":"entretien/bonnespratiques.md"}'),t={name:"entretien/bonnespratiques.md"},a=n('<h2 id="clean-code" tabindex="-1">Clean Code <a class="header-anchor" href="#clean-code" aria-hidden="true">#</a></h2><ul><li>Qu&#39;est-ce que le &quot;Clean Code&quot; ?</li><li>Quels outils/techniques utilisez-vous pour vous assurer que vous faites du &quot;Clean Code&quot; ?</li><li>Quand est-ce qu&#39;il faut commenter du code ?</li></ul><h2 id="craftsmanship" tabindex="-1">CraftsmanShip <a class="header-anchor" href="#craftsmanship" aria-hidden="true">#</a></h2><details class="details custom-block"><summary>Manifest for software craftsmanship</summary><p>Élever le niveau En tant qu’aspirants Artisans du Logiciel, nous relevons le niveau du développement professionnel de logiciels par la pratique et en aidant les autres à acquérir le savoir-faire. Grâce à ce travail, nous avons appris à apprécier :</p><p>Pas seulement des logiciels opérationnels, mais aussi des logiciels bien conçus. Pas seulement l&#39;adaptation aux changements, mais aussi l&#39;ajout constant de la valeur. Pas seulement les individus et leurs interactions, mais aussi une communauté de professionnels. Pas seulement la collaboration avec les clients, mais aussi des partenariats productifs. C&#39;est-à-dire qu&#39;en recherchant les éléments de gauche, nous avons trouvé que les éléments de droite sont indispensables.</p><p>© 2009, les soussignés. Cette déclaration peut être copiée librement, quelle que soit la forme, mais seulement dans sa totalité, y compris cette remarque.</p></details><h2 id="oop" tabindex="-1">OOP <a class="header-anchor" href="#oop" aria-hidden="true">#</a></h2><ul><li>Quels sont les 3 grands principes de l&#39;orienté objet ?</li></ul><h2 id="solid" tabindex="-1">SOLID <a class="header-anchor" href="#solid" aria-hidden="true">#</a></h2><details class="details custom-block"><summary>Principes SOLID</summary><p>S - Responsabilité unique (Single responsibility principle) Une classe doit avoir une seule et unique raison de changer, ce qui signifie qu’une classe ne doit appartenir qu’à une seule tâche.</p><p>O - Ouvert/fermé (Open/closed principle) Les objets ou entités devraient être ouverts à l’extension, mais fermés à la modification.</p><p>L - Substitution de Liskov (Liskov substitution principle) Si q(x) est une propriété démontrable pour tout objet x de type T, alors q(y) est vraie pour tout objet y de type S tel que S est un sous-type de T.</p><p>I - Ségrégation des interfaces (Interface segregation principle) Un client ne doit jamais être forcé à installer une interface qu’il n’utilise pas et les clients ne doivent pas être forcés à dépendre de méthodes qu’ils n’utilisent pas.</p><p>D - Inversion des dépendances (Dependency inversion principle) Les entités doivent dépendre des abstractions, pas des implémentations. Il indique que le module de haut niveau ne doit pas dépendre du module de bas niveau, mais qu’ils doivent dépendre des abstractions.</p></details><h2 id="methode-agile" tabindex="-1">Méthode Agile <a class="header-anchor" href="#methode-agile" aria-hidden="true">#</a></h2><details class="details custom-block"><summary>Manifest Agile</summary><p>Manifeste pour le développement Agile de logiciels</p><p>Nous découvrons comment mieux développer des logiciels par la pratique et en aidant les autres à le faire. Ces expériences nous ont amenés à valoriser :</p><p>Les individus et leurs interactions plus que les processus et les outils Des logiciels opérationnels plus qu’une documentation exhaustive La collaboration avec les clients plus que la négociation contractuelle L’adaptation au changement plus que le suivi d’un plan</p><p>Nous reconnaissons la valeur des seconds éléments, mais privilégions les premiers.</p><p>Kent Beck Mike Beedle Arie van Bennekum Alistair Cockburn Ward Cunningham Martin Fowler James Grenning Jim Highsmith Andrew Hunt Ron Jeffries Jon Kern Brian Marick Robert C. Martin Steve Mellor Ken Schwaber Jeff Sutherland Dave Thomas</p><p>© 2001, the above authors this declaration may be freely copied in any form, but only in its entirety through this notice.</p><h4 id="principes-sous-jacents-au-manifeste" tabindex="-1">Principes sous-jacents au manifeste <a class="header-anchor" href="#principes-sous-jacents-au-manifeste" aria-hidden="true">#</a></h4><p>Nous suivons ces principes : Notre plus haute priorité est de satisfaire le client en livrant rapidement et régulièrement des fonctionnalités à grande valeur ajoutée.</p><p>Accueillez positivement les changements de besoins, même tard dans le projet. Les processus Agiles exploitent le changement pour donner un avantage compétitif au client.</p><p>Livrez fréquemment un logiciel opérationnel avec des cycles de quelques semaines à quelques mois et une préférence pour les plus courts.</p><p>Les utilisateurs ou leurs représentants et les développeurs doivent travailler ensemble quotidiennement tout au long du projet.</p><p>Réalisez les projets avec des personnes motivées. Fournissez-leur l’environnement et le soutien dont ils ont besoin et faites-leur confiance pour atteindre les objectifs fixés.</p><p>La méthode la plus simple et la plus efficace pour transmettre de l’information à l&#39;équipe de développement et à l’intérieur de celle-ci est le dialogue en face à face.</p><p>Un logiciel opérationnel est la principale mesure d’avancement.</p><p>Les processus Agiles encouragent un rythme de développement soutenable. Ensemble, les commanditaires, les développeurs et les utilisateurs devraient être capables de maintenir indéfiniment un rythme constant.</p><p>Une attention continue à l&#39;excellence technique et à une bonne conception renforce l’Agilité.</p><p>La simplicité – c’est-à-dire l’art de minimiser la quantité de travail inutile – est essentielle.</p><p>Les meilleures architectures, spécifications et conceptions émergent d&#39;équipes autoorganisées.</p><p>À intervalles réguliers, l&#39;équipe réfléchit aux moyens de devenir plus efficace, puis règle et modifie son comportement en conséquence.</p></details><ul><li>Agile vs Cycle en V ?</li><li>Quels sont les grands principes Agile ?</li><li>Kanban vs Scrum</li><li>Outils de gestion agile Jira ?</li></ul><h2 id="veille-technologique" tabindex="-1">Veille Technologique <a class="header-anchor" href="#veille-technologique" aria-hidden="true">#</a></h2><ul><li>Faites-vous de la veille technologique ? (curiosité, intérêt pour son travail)</li><li>Comment effectuez-vous votre veille (mailing list, suivi de la communauté, meetup, devfest...) ?</li><li>Participez-vous à de l&#39;open source ?</li></ul>',13),l=[a];function o(r,u,c,d,p,m){return s(),i("div",null,l)}const f=e(t,[["render",o]]);export{v as __pageData,f as default};
