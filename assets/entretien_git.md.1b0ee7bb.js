import{_ as e,c as t,o as a,a as r}from"./app.67a20785.js";const v='{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"entretien/git.md"}',o={},i=r('<ul><li>Comment versionner son code ?</li><li>Qu&#39;est-ce que Git et comment cela s&#39;utilise ? (local et remote via GitHub, GitLab, etc.)</li><li>Qu&#39;est-ce que git flow, trunk base development ?</li></ul><details class="details custom-block"><summary>Expliquer la commande git Merge vs Rebase ?</summary><p>MERGE</p><p>Bon choix lorsque l&#39;on souhaite ajouter notre travail \xE0 un travail collectif.</p><p>Cela va cr\xE9er un commit de merge regroupant les commits et modifier la branche master. Exemple :</p><p>Dans le cas o\xF9, il n&#39;y a pas de commit en &quot;retard&quot; sur la branche feature, aucun commit de marge n&#39;est cr\xE9\xE9, cela se nomme le &quot;Fast Forward&quot;.</p><p>REBASE</p><p>Bon choix lorsque l&#39;on souhaite r\xE9cup\xE9rer le travail de coll\xE8gues pour mettre \xE0 jour sa version de la branche partag\xE9. Ou se mettre \xE0 jour par rapport \xE0 une branche d&#39;origine.</p><p>Cela va rejouer l&#39;historique de la branche local au top de la branche que l&#39;on rebase sans cr\xE9er de commit. Si lors du &quot; rolling&quot;, il y a un conflit sur un commit, git va demander \xE0 r\xE9soudre ce conflit avant de poursuivre au commit suivant.</p><p>Le rebase permet de conserver un historique lin\xE9aire tr\xE8s lisible.</p></details><ul><li>Qu&#39;est-ce qu&#39;un rebase interactive ?</li></ul>',3),l=[i];function s(n,u,c,m,p,d){return a(),t("div",null,l)}var h=e(o,[["render",s]]);export{v as __pageData,h as default};
