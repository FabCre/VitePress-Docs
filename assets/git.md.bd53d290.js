import{_ as e,c as r,o as a,d as t}from"./app.b958bfe6.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Git help reminder","slug":"git-help-reminder","link":"#git-help-reminder","children":[]},{"level":2,"title":"Merge versus Rebase","slug":"merge-versus-rebase","link":"#merge-versus-rebase","children":[]}],"relativePath":"git.md"}'),i={name:"git.md"},s=t('<h2 id="git-help-reminder" tabindex="-1">Git help reminder <a class="header-anchor" href="#git-help-reminder" aria-hidden="true">#</a></h2><p>Application React avec vite sur <a href="https://fabcre.github.io/React-Git-Help/" target="_blank" rel="noreferrer">gitHub page</a>.</p><h2 id="merge-versus-rebase" tabindex="-1">Merge versus Rebase <a class="header-anchor" href="#merge-versus-rebase" aria-hidden="true">#</a></h2><p><strong>MERGE</strong></p><p>Bon choix lorsque l&#39;on souhaite ajouter notre travail à un travail collectif.</p><p>Cela va créer un commit de merge regroupant les commits et modifier la branche master.</p><p>Dans le cas où, il n&#39;y a pas de commit en &quot;retard&quot; sur la branche feature, aucun commit de merge n&#39;est créé, cela se nomme le &quot;Fast Forward&quot;.</p><p><strong>REBASE</strong></p><p>Bon choix lorsque l&#39;on souhaite récupérer le travail de collègues pour mettre à jour sa version de la branche partagé. Ou se mettre à jour par rapport à une branche d&#39;origine.</p><p>Cela va rejouer l&#39;historique de la branche local au top de la branche que l&#39;on rebase sans créer de commit. Si lors du &quot; rolling&quot;, il y a un conflit sur un commit, git va demander à résoudre ce conflit avant de poursuivre au commit suivant.</p><p>Le rebase permet de conserver un historique linéaire très lisible.</p>',11),o=[s];function n(l,c,u,p,d,m){return a(),r("div",null,o)}const _=e(i,[["render",n]]);export{g as __pageData,_ as default};
